plugins {
    id "com.github.johnrengelman.shadow" version "7.0.0"
}

loom {
    forge {
        mixinConfig "${project.mod_id}-common.mixins.json"
        mixinConfig "${project.mod_id}.mixins.json"
    }
}

architectury {
    platformSetupLoomIde()
    forge()
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

archivesBaseName = "${rootProject.archivesBaseName}-${project.name}"

dependencies {
    forge "net.minecraftforge:forge:${rootProject.minecraft_version}-${rootProject.forge_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
}

processResources {
    inputs.property "id", project.mod_id
    inputs.property "name", project.mod_name
    inputs.property "version", project.mod_version

    filesMatching("META-INF/mods.toml") {
        expand "id": project.mod_id, "name": project.mod_name, "version": project.mod_version
    }
}

shadowJar {
    exclude "fabric.mod.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = project.archivesBaseName
            from components.java
        }
    }
}
